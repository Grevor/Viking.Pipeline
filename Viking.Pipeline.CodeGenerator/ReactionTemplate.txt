using System;
using System.Linq;

namespace Viking.Pipeline
{
	/// <summary>
    /// Enables reactions to changes in pipeline values.
    /// </summary>
    $TypeParameterComments2$
    public sealed partial class ReactionPipelineStage<$GenericParameters$> : IPipelineStage
    {
		/// <summary>
        /// Creates a new <see cref="ReactionPipelineStage"/> with the specified reaction to the specified inputs.
        /// </summary>
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
		public ReactionPipelineStage(
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$) :
			this(GetDefaultName($RepassingParameters$), reaction, $RepassingParameters$) 
		{ }

		/// <summary>
        /// Creates a new <see cref="ReactionPipelineStage"/> with the specified reaction to the specified inputs.
        /// </summary>
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
        /// <param name="reactImmediately">Denotes if the reaction should fire immediately upon construction.</param>
		public ReactionPipelineStage(
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$,
			bool reactImmediately) :
			this(GetDefaultName($RepassingParameters$), reaction, $RepassingParameters$, reactImmediately) 
		{ }

		/// <summary>
        /// Creates a new <see cref="ReactionPipelineStage"/> with the specified name and reaction to the specified inputs.
        /// </summary>
        /// <param name="name">The name of the new reaction.</param>
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
		public ReactionPipelineStage(
			string name, 
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$) :
			this(name, reaction, $RepassingParameters$, true) 
		{ }

		/// <summary>
        /// Creates a new <see cref="ReactionPipelineStage"/> with the specified name and reaction to the specified inputs.
        /// </summary>
        /// <param name="name">The name of the new reaction.</param>
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
        /// <param name="reactImmediately">Denotes if the reaction should fire immediately upon construction.</param>
		public ReactionPipelineStage(
			string name, 
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$, 
			bool reactImmediately)
		{
			Name = name ?? throw new ArgumentNullException(nameof(name));
			Reaction = reaction ?? throw new ArgumentNullException(nameof(reaction));
			$ConstructorAssignment$
			this.AddDependencies($RepassingParameters$);
			if (reactImmediately)
				Reaction($Getters$);
		}

		/// <summary>
        /// Gets the name of the reaction.
        /// </summary>
		public string Name { get; }
        /// <summary>
        /// The function which is called as a reaction to any change in inputs.
        /// </summary>
		public Action<$GenericParameters$> Reaction { get; }
		$ClassFields$

		/// <summary>
        /// Handles invalidation of the operation stage, and reacts as appropriate.
        /// </summary>
        /// <param name="invalidator">The invalidator.</param>
		public void OnInvalidate(IPipelineInvalidator invalidator)
		{
			invalidator.InvalidateAllDependentStages(this);
			Reaction($Getters$);
		}

		/// <summary>
        /// Gets a textual representation of this pipeline stage.
        /// </summary>
        /// <returns>A textual representation.</returns>
		public override string ToString() => $"{Name} - Reaction is {Reaction.GetDetailedStringRepresentation()}";

		private static string GetDefaultName(params IPipelineStage[] stages) => $"Reaction to {string.Join(", ", stages.Select(p => "'" + p.Name + "'"))}";
    }

	public static partial class PipelineReactions
	{
		/// <summary>
        /// Creates a reaction to the specified pipeline stages.
        /// </summary>
        $TypeParameterComments$
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
        /// <returns>A reaction stage. The reaction is only guaranteed to fire while you hold on to this reference.</returns>
		public static IPipelineStage Create<$GenericParameters$>(
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$)
			=> new ReactionPipelineStage<$GenericParameters$>(
				reaction,
				$RepassingParameters$);

		/// <summary>
        /// Creates a reaction to the specified pipeline stages.
        /// </summary>
        $TypeParameterComments$
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
        /// <param name="reactImmediately">Denotes if the reaction should fire immediately upon construction.</param>
        /// <returns>A reaction stage. The reaction is only guaranteed to fire while you hold on to this reference.</returns>
		public static IPipelineStage Create<$GenericParameters$>(
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$, 
			bool reactImmediately)
			=> new ReactionPipelineStage<$GenericParameters$>(
				reaction,
				$RepassingParameters$,
				reactImmediately);

		/// <summary>
        /// Creates a reaction to the specified pipeline stages.
        /// </summary>
        $TypeParameterComments$
        /// <param name="name">The name of the new reaction.</param>
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
        /// <returns>A reaction stage. The reaction is only guaranteed to fire while you hold on to this reference.</returns>
		public static IPipelineStage Create<$GenericParameters$>(
			string name, 
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$)
			=> new ReactionPipelineStage<$GenericParameters$>(
				name,
				reaction,
				$RepassingParameters$);

		/// <summary>
        /// Creates a reaction to the specified pipeline stages.
        /// </summary>
        $TypeParameterComments$
        /// <param name="name">The name of the new reaction.</param>
        /// <param name="reaction">The reaction delegate.</param>
        $ParameterComments$
        /// <param name="reactImmediately">Denotes if the reaction should fire immediately upon construction.</param>
        /// <returns>A reaction stage. The reaction is only guaranteed to fire while you hold on to this reference.</returns>
		public static IPipelineStage Create<$GenericParameters$>(
			string name, 
			Action<$GenericParameters$> reaction, 
			$ConstructorParameters$, 
			bool reactImmediately)
			=> new ReactionPipelineStage<$GenericParameters$>(
				name,
				reaction,
				$RepassingParameters$,
				reactImmediately);
	}
}
