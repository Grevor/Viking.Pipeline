using System;

namespace Viking.Pipeline
{
    public class ChangeableOperationPipelineStage<$GenericParameters$, TOutput> : IPipelineStage<TOutput>
    {
		public ChangeableOperationPipelineStage(
			string name, 
			IPipelineStage<Func<$GenericParameters$, TOutput>> operation, 
			$ConstructorParameters$)
		{
			Name = name ?? throw new ArgumentNullException(nameof(name));
			OperationStage = operation ?? throw new ArgumentNullException(nameof(operation));
			$ConstructorAssignment$
			this.AddDependencies(operation, $RepassingParameters$);
		}

		public string Name { get; }
		public IPipelineStage<Func<$GenericParameters$, TOutput>> OperationStage { get; }
		$ClassFields$

		public TOutput GetValue() => OperationStage.GetValue().Invoke($Getters$);

		public void OnInvalidate(IPipelineInvalidator invalidator) => invalidator.InvalidateAllDependentStages(this);

		public override string ToString() => $"{Name} - Operation is {OperationStage.GetValue()?.GetDetailedStringRepresentation() ?? "<null>" }";
    }

	public static partial class ChangeablePipelineOperations
	{
		public static ChangeableOperationPipelineStage<$GenericParameters$, TOutput> Create<$GenericParameters$, TOutput>(
			string name, 
			IPipelineStage<Func<$GenericParameters$, TOutput>> operation, 
			$ConstructorParameters$)
			=> new ChangeableOperationPipelineStage<$GenericParameters$, TOutput>(
				name,
				operation,
				$RepassingParameters$);
	}
}
